#extends gen_config_maps
#from itertools import islice
/**
  This is an automatically generated file. Changes to this file
  should instead either be made in a separate file or to the
  configuration CSV file used to generate this file, or to the template

  This file was mechanically generated by running the config.csv, containing
  comma-delimited key/value pairs of all configuration values through
  the "gen_config_maps.py" python script, which uses a cheetah template to
  mechanically format a valid C++ file.

  This file is packaged as a part of the FUMe project.

  To the extent possible under law, the person who associated CC0 with
  FUMe has waived all copyright and related or neighboring rights
  to FUMe.

  You should have received a copy of the CC0 legalcode along with this
  work.  If not, see http://creativecommons.org/publicdomain/zero/1.0/.
**/

// std
\#include <utility>

// local public
\#include "mc3msg.h"

// local private
\#include "fume/configuration_maps.h"

using std::pair;
using std::begin;
using std::end;

namespace fume
{

#set ($string_vals, $int_vals, $long_vals, $bool_vals) = $config_lists()

#if $len($string_vals) > 0
static string_parm_map_t::value_type string_vals[] =
{
    #for ($key, $value) in $string_vals[0:-1]
    { $key, "$value" },
    #end for
    #set ($key, $value) = $string_vals[-1]
    { $key, "$value" }
};
#end if

#if $len($int_vals) > 0
static int_parm_map_t::value_type int_vals[] =
{
    #for ($key, $value) in $int_vals[0:-1]
    { $key, $value },
    #end for
    #set ($key, $value) = $int_vals[-1]
    { $key, $value }
};
#end if

#if $len($long_vals) > 0
static long_parm_map_t::value_type long_vals[] =
{
    #for ($key, $value) in $long_vals[0:-1]
    { $key, $value },
    #end for
    #set ($key, $value) = $long_vals[-1]
    { $key, $value }
};
#end if

#if $len($bool_vals) > 0
static bool_parm_map_t::value_type bool_vals[] =
{
    #for ($key, $value) in $bool_vals[0:-1]
    { $key, $value },
    #end for
    #set ($key, $value) = $bool_vals[-1]
    { $key, $value }
};
#end if

config_maps create_config_maps()
{
    config_maps ret;

    #if $len($string_vals) > 0
    ret.strings.insert( begin(string_vals), end(string_vals) );
    #end if

    #if $len($int_vals) > 0
    ret.ints.insert( begin(int_vals), end(int_vals) );
    #end if

    #if $len($long_vals) > 0
    ret.longs.insert( begin(long_vals), end(long_vals) );
    #end if

    #if $len($bool_vals) > 0
    ret.bools.insert( begin(bool_vals), end(bool_vals) );
    #end if

    return ret;
}

}
