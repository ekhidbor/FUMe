#extends gen_tag_vrs
#from gen_tag_vrs import format_tag
#from itertools import islice
/**
  This is an automatically generated file. Changes to this file
  should instead either be made in a separate file or to the
  data element CSV file used to generate this file, or to the template

  This file was mechanically generated by running the diction_standard.csv 
  and diction_system.csv files, containing comma-delimited files of all tags
  and value representations through the "gen_tag_vrs.py" python script, which
  uses a cheetah template to mechanically format a valid C++ file.

  This file is packaged as a part of the FUMe project.

  To the extent possible under law, the person who associated CC0 with
  FUMe has waived all copyright and related or neighboring rights
  to FUMe.

  You should have received a copy of the CC0 legalcode along with this
  work.  If not, see http://creativecommons.org/publicdomain/zero/1.0/.
**/

// std
\#include <cstdint>
\#include <utility>
\#include <iterator>

// local public
\#include "mc3msg.h"

// local private
\#include "tag_to_vr.h"

using std::pair;
using std::begin;
using std::end;

namespace fume
{

static const pair<uint32_t, tag_vr_packed> tag_vrs[] =
{
    #set $sorted_vr_map = $sorted($vr_map().iteritems())
    #for ($tag, $value) in $islice($sorted_vr_map, 0, $len($sorted_vr_map) - 1)
    { $format_tag($tag), { $value.vr, $value.min_val, $value.max_val, $value.multiple } },
    #end for
    #set ($tag, $value) = $sorted_vr_map[-1]
    { $format_tag($tag), { $value.vr, $value.min_val, $value.max_val, $value.multiple } }
};

tag_to_vr_map create_default_tag_vr_dict()
{
    return tag_to_vr_map( begin( tag_vrs ), end( tag_vrs) );
}

}
